[dns]
# DNS interface. Note that systemd-resolved may reserve port 53 on 127.0.0.53
# In this case acme-dns will error out and you will need to define the listening interface
# for example: listen = "127.0.0.1:53"
#listen = "0.0.0.0:53"
listen = "127.0.0.1:15353"
# protocol, "both", "both4", "both6", "udp", "udp4", "udp6" or "tcp", "tcp4", "tcp6"
#protocol = "both"
# domain name to serve the requests off of
domain = "auth.example.org"
# zone name server
nsname = "auth.example.org"
# admin email address, where @Â is substituted with .
nsadmin = "admin.example.org"
# predefined records served in addition to the TXT
records = [
    # domain pointing to the public IP of your acme-dns server 
    "auth.example.org. A 198.51.100.1",
    # specify that auth.example.org will resolve any *.auth.example.org records
    "auth.example.org. NS auth.example.org.",
]

[database]
# Database engine to use, sqlite3 or postgres
engine = "sqlite3"
# Connection string, filename for sqlite3 and postgres://$username:$password@$host/$db_name for postgres
# Please note that the default Docker image uses path /var/lib/dnsacmed/dnsacmed.db for sqlite3
#connection = "/var/lib/dnsacmed/dnsacmed.db"
connection = "acme-dns.db"
# connection = "postgres://user:password@localhost/acmedns_db"

[api]
# API listen interface
#listen = "0.0.0.0:80"
listen = "127.0.0.1:8080"
# disable registration endpoint
#disable_registration = false
#tls = false
# only used if tls = true
#tls_cert_privkey = "/etc/tls/example.org/privkey.pem"
#tls_cert_fullchain = "/etc/tls/example.org/fullchain.pem"
# use HTTP header to get the client ip
#use_header = false
# header name to pull the ip address / list of ip addresses from
#header_name = "X-Forwarded-For"

[logging]
# logging level: "error", "warning", "info" or "debug"
level = "debug"
# possible values: stdout, TODO file & integrations
type = "stdout"
# file path for logfile TODO
# logfile = "./dnsacmed.log"
# format, either "json" or "text"
format = "text"
